SELECT
    volume.objId AS id,
    volume.vserverId AS vserver_id,
    volume.aggregateId AS aggregate_id,
    volume.cloneParentId AS parent_volume_id,
    volume.name AS NAME,
    volume.size/1024/1024 AS size_mb,
    IF (ISNULL(volume.sizeUsed),
    0,
    volume.sizeUsed/1024/1024) AS used_size_mb,
    IF (ISNULL(volume.sizeAvail),
    0,
    volume.sizeAvail/1024/1024) AS available_size_mb,
    volume.volTypeRaw AS TYPE,
    volume.stateRaw AS state,
    volume.junctionPath AS junction_path,
    volume.spaceGuaranteeRaw AS space_guarantee,
    IF (ISNULL(volume.sizeUsedBySnapshots),
    0,
    volume.sizeUsedBySnapshots/1024/1024) AS snapshot_used_mb,
    IF (ISNULL(volume.percentageSnapshotReserve),
    0,
    volume.percentageSnapshotReserve) AS snapshot_reserved_percent,
    IF (ISNULL(volume.isAutoSnapshotsEnabled),
    0,
    volume.isAutoSnapshotsEnabled) AS snapshot_enabled,
    IF(volume.derivedStyle = 'FLEXVOL',
    'flex',
    LOWER(volume.derivedStyle)) AS style,
    volume.autoSizeMaximumSize/1024/1024 AS max_autosize_mb,
    volume.inodeBlockTypeRaw AS block_type,
    volume.securityStyleRaw AS security_style,
    IF(volume.sisState = 'enabled',
    1,
    0) AS dedupe_enabled,
    volume.autoSizeIncrementSize/1024/1024 AS auto_increment_size_mb,
    volume.snapshotPolicyId AS snapshot_policy_id,
    volume.exportPolicyId AS export_policy_id,
    IF(volume.autoSizeMode IS NULL                                                                 
    OR volume.autoSizeMode = 'off' ,
    0,
    1) AS autosize_enabled,
    IF(volume.isSisInlineCompressionEnabled = 1,
    'inline',
    IF(volume.isSisCompressionEnabled = 1,
    'background',
    'disabled')) AS compression,
    volume.deduplicationSpaceSaved/1024/1024 AS deduplication_space_saved_mb,
    volume.compressionSpaceSaved/1024/1024 AS compression_space_saved_mb,
    volume.percentageDeduplicationSpaceSaved AS percent_deduplication_space_saved,
    volume.percentageCompressionSpaceSaved AS percent_compression_space_saved,
    volume.hybridCacheEligibility AS hybrid_cache_eligibility,
    volume.inodeFilesTotal AS inode_files_total,
    volume.inodeFilesUsed AS inode_files_used,
    volume.autoSizeModeRaw AS auto_size_mode,
    volume.sisLastOpBeginTimestamp AS sis_last_op_begin_timestamp,
    volume.sisLastOpEndTimestamp AS sis_last_op_end_timestamp,
    volume.flexCacheOriginId AS flexcache_origin_volume_id,
    volume.flexCacheMinReserve/1024/1024 AS flexcache_min_reserve_mb,
    volume.constituentRole AS constituent_role,
    volume.isManagedByService AS is_managed_by_service,
    storage_class.storageServiceName AS storage_class,
    volume.isSnapDiffEnabled AS snap_diff_enabled,
    volume.maxNamespaceConstituentSize/1024/1024 AS max_namespace_constituent_size_mb,
    volume.maxDataConstituentSize/1024/1024 AS max_data_constituent_size_mb,
    volume.sisPolicyId AS efficiency_policy_id,
    volume.qosPolicyGroupId AS qos_policy_group_id,
    IF (volume.languageCode IS NULL,
    NULL,
    LOWER(volume.languageCode)) AS language,
    oc_volume.bytesUsedPerDay/1024/1024 AS data_daily_growth_rate_mb,
    oc_volume.daysUntilFull AS data_days_until_full,
    volume.isSnapshotAutoDeleteEnabled AS auto_delete_enabled,
    volume.snapshotAutoDeleteCommitmentRaw AS auto_delete_commitment,
    volume.snapshotAutoDeleteDeleteOrderRaw AS auto_delete_delete_order,
    volume.snapshotAutoDeleteDeferDeleteRaw AS auto_delete_defer_delete,
    volume.snapshotAutoDeleteTargetFreeSpace AS auto_delete_target_free_space,
    volume.snapshotAutoDeleteTriggerRaw AS auto_delete_trigger,
    volume.snapshotAutoDeletePrefix AS auto_delete_prefix,
    volume.snapshotAutoDeleteDestroyList AS auto_delete_destroy_list,
    volume.snapLockTypeRaw AS snaplock_type,
    IF (volume.tieringPolicyRaw = 'snapshot_only' ,
    'snapshot-only',
    volume.tieringPolicyRaw   )  AS tiering_policy,
    volume.isEncrypt AS is_encrypt            
FROM
    netapp_model_view.volume volume             
LEFT JOIN
    netapp_model_view.storage_service storage_class                                                                                                                     
        ON storage_class.objId = volume.storageServiceId             
LEFT JOIN
    ocum_view.volume oc_volume                                                                                                                     
        ON oc_volume.id = volume.objId             
WHERE
    IF (volume.derivedStyle = 'CONSTITUENT', volume.constituentRoleRaw NOT IN ('member', 'root'), volume.isConstituent = 0)